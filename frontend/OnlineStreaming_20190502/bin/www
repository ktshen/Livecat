#!/usr/bin/env node
var app = require('../app');
var https = require('https');
var fs = require("fs");

// HTTPS cert for server
// var options = {
//     key: fs.readFileSync('/etc/letsencrypt/live/www.ilivenet.com/privkey.pem'),
//     cert: fs.readFileSync('/etc/letsencrypt/live/www.ilivenet.com/fullchain.pem')
// };

// HTTPS cert for local
// var options = {
//     key: fs.readFileSync('pem/privatekey.pem'),
//     cert: fs.readFileSync('pem/certificate.pem')
// };

// https.createServer(options, app).listen(443, function () {
//     console.log('Https server listening on port ' + 443);
// });

/**
 * Module dependencies.
 */

var debug = require('debug')('testexp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

//redirect to https port
// http.createServer(function (req, res) {
//     res.writeHead(301, { "Location": "https://" + req.headers['host'] +":443"+ req.url });
//     res.end();
// }).listen(80);

http.createServer(app).listen(55537);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
