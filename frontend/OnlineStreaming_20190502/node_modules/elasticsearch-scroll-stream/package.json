{
  "_from": "elasticsearch-scroll-stream",
  "_id": "elasticsearch-scroll-stream@1.1.4",
  "_inBundle": false,
  "_integrity": "sha512-0XG8KeHEKhso/hNPIrp21masnrRJZDUkeX4GreDxoA3S63w4+VvsSDSGfWk+f7uewb7ZNQqXWCSwLyfAD5eXNw==",
  "_location": "/elasticsearch-scroll-stream",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "elasticsearch-scroll-stream",
    "fetchSpec": "latest",
    "name": "elasticsearch-scroll-stream",
    "raw": "elasticsearch-scroll-stream",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/elasticsearch-scroll-stream/-/elasticsearch-scroll-stream-1.1.4.tgz",
  "_shasum": "fc636e44a794fbe606b7d54c87c73355daece152",
  "_shrinkwrap": null,
  "_spec": "elasticsearch-scroll-stream",
  "_where": "/Users/zihxiangwen/Desktop/OnlineStreaming_20190408",
  "author": {
    "email": "francesco.valente@alcacoop.it",
    "name": "Francesco Valente"
  },
  "bugs": {
    "url": "https://github.com/alcacoop/elasticsearch-scroll-stream/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Elasticsearch Scroll query results as a Stream",
  "devDependencies": {
    "chai": "^4.2.0",
    "elastical": "0.0.13",
    "elasticsearch": "^15.2.0",
    "mocha": "^5.2.0"
  },
  "engines": {
    "node": ">= 0.10.x"
  },
  "homepage": "https://github.com/alcacoop/elasticsearch-scroll-stream#readme",
  "keywords": [
    "elasticsearch",
    "scan",
    "scroll",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "elasticsearch-scroll-stream",
  "optionalDependencies": {},
  "readme": "\n# Elasticsearch Scroll Stream\n\n[![Build Status](https://travis-ci.org/alcacoop/elasticsearch-scroll-stream.svg?branch=master)](https://travis-ci.org/alcacoop/elasticsearch-scroll-stream)\n\nElasticsearch Scroll query results as a Node.js Readable Stream.\n\nThis module works with the following Elasticsearch nodejs clients:\n\n - [elasticsearch](https://www.npmjs.org/package/elasticsearch) (official Elasticsearch js API)\n - [elastical](https://www.npmjs.org/package/elastical) (DEPRECATED - Discontinued support)\n\n\n## API\n\n`ElasticsearchScrollStream` is a Readable Stream, so it supports all the methods of a classic `Stream#Readable`.\nIn addition it exposes a `#close()` method to force the stream to stop sourcing from Elasticsearch.\nWhen the stream begins to be consumed (starting from the first `data` event), it will contain an attribute `_total`\nthat is the total number of matched documents.\n\n## Installing\n\nTo install the latest released version:\n\n    npm install elasticsearch-scroll-stream --save\n\n\n## Usage with the official Elasticsearch js API\n\nExample with a [simple query strings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-uri-request.html) query.\n\n```js\nvar elasticsearch = require('elasticsearch');\nvar ElasticsearchScrollStream = require('elasticsearch-scroll-stream');\n\nvar client = new elasticsearch.Client();\n\n// Create index and add documents here...\n\n// You need to pass the client instance and the query object\n// as parameters in the constructor\nvar es_stream = new ElasticsearchScrollStream(client, {\n  index: 'elasticsearch-test-scroll-stream',\n  type: 'test-type',\n  scroll: '10s',\n  size: '50',\n  _source: ['name'],\n  q: 'name:*'\n});\n\n// Pipe the results to other writeble streams..\nes_stream.pipe(process.stdout);\n\nes_stream.on('end', function() {\n  console.log(\"End\");\n});\n\n```\n\n\nExample with a [simple query strings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-uri-request.html) query,\nand `optional_fields` specified (in this case we want `_id` and `_score` fields into results).\n\n```js\nvar elasticsearch = require('elasticsearch');\nvar ElasticsearchScrollStream = require('elasticsearch-scroll-stream');\n\nvar client = new elasticsearch.Client();\n\n// Create index and add documents here...\n\n// You need to pass the client instance and the query object\n// as parameters in the constructor\nvar es_stream = new ElasticsearchScrollStream(client, {\n  index: 'elasticsearch-test-scroll-stream',\n  type: 'test-type',\n  scroll: '10s',\n  size: '50',\n  _source: ['name'],\n  q: 'name:*'\n}, ['_id', '_score']); // optional_fields parameter: allowed values are those supported by elasticsearch\n\n// Pipe the results to other writeble streams..\nes_stream.pipe(process.stdout);\n\nes_stream.on('end', function() {\n  console.log(\"End\");\n});\n\n```\n\nExample with a full request definition using the [Elasticsearch Query DSL](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html).\n\n```js\nvar elasticsearch = require('elasticsearch');\nvar ElasticsearchScrollStream = require('elasticsearch-scroll-stream');\n\nvar client = new elasticsearch.Client();\n\n// Create index and add documents here...\n\n// You need to pass the client instance and the query object\n// as parameters in the constructor\nvar es_stream = new ElasticsearchScrollStream(client, {\n  index: 'elasticsearch-test-scroll-stream',\n  type: 'test-type',\n  scroll: '10s',\n  size: '50',\n  _source: ['name'],\n  body: {\n    query: {\n      bool: {\n        must: [\n          {\n            query_string: {\n              default_field: \"_all\",\n              query: 'name:*'\n            }\n          }\n        ]\n      }\n    }\n  }\n});\n\n// Pipe the results to other writeble streams..\nes_stream.pipe(process.stdout);\n\nes_stream.on('end', function() {\n  console.log(\"End\");\n});\n\n```\n\nExample of using the `close()` method.\n\n```js\nvar elasticsearch = require('elasticsearch');\nvar ElasticsearchScrollStream = require('elasticsearch-scroll-stream');\n\n// Create index and add documents here...\n\n// You need to pass the client instance and the query object\n// as parameters in the constructor\n\nvar pageSize = '5';\nvar stopCounterIndex = (parseInt(pageSize) + 1);\nvar counter = 0;\nvar current_doc;\nvar elasticsearch_client = new elasticsearch.Client();\n\nvar es_stream = new ElasticsearchScrollStream(elasticsearch_client, {\n  index: 'elasticsearch-test-scroll-stream',\n  type: 'test-type',\n  scroll: '10s',\n  size: pageSize,\n  _source: [\"name\"],\n  body: {\n    query: {\n      bool: {\n        must: [\n          {\n            query_string: {\n              default_field: \"_all\",\n              query: 'name:third*'\n            }\n          }\n        ]\n      }\n    }\n  }\n}, ['_id', '_score']);\n\nes_stream.on('data', function(data) {\n  current_doc = JSON.parse(data.toString());\n  if (counter == stopCounterIndex) {\n    es_stream.close();\n  }\n  counter++;\n});\n\nes_stream.on('end', function() {\n  console.log(counter);\n});\n\nes_stream.on('error', function(err) {\n  console.log(err);\n});\n\n```\nSee test files for more examples.\n\n\nDeveloping\n----------\n\nFork the git repo, clone it, then install the dev dependencies.\n\n    cd elasticsearch-scroll-stream\n    npm install\n\nMake your changes, add tests, then run the tests to make sure nothing broke.\n\n    make\n\nNOTE: Tests require an ElasticSearch server running at http://127.0.0.1:9200/.\nYou can spawn a docker container for the purpose with:\n\n    docker-compose up -d\n\nwhich maps host port `127.0.0.1:9200` to container port `9200`\n\n\nLICENSE\n--------\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Francesco Valente\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/alcacoop/elasticsearch-scroll-stream.git"
  },
  "scripts": {
    "test": "make"
  },
  "version": "1.1.4"
}
