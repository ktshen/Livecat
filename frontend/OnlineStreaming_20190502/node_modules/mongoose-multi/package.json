{
  "_from": "mongoose-multi",
  "_id": "mongoose-multi@0.4.6",
  "_inBundle": false,
  "_integrity": "sha512-P375ZNqHMg6qjOw6LTp+wdCfbQSngk9YIAcoY+IMSUb+1y9Y/7KyCaivJqksju+JUCpTosOi0GGqpXKGcJLvxQ==",
  "_location": "/mongoose-multi",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mongoose-multi",
    "fetchSpec": "latest",
    "name": "mongoose-multi",
    "raw": "mongoose-multi",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-multi/-/mongoose-multi-0.4.6.tgz",
  "_shasum": "ae02de7e2b09b1e7d4522b181592664e6bb222ba",
  "_shrinkwrap": null,
  "_spec": "mongoose-multi",
  "_where": "/Users/zihxiangwen/Desktop/OnlineStreaming",
  "author": {
    "name": "Felix Furtmayr"
  },
  "bugs": {
    "url": "https://github.com/rapidfacture/mongoose-multi/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "gridfs-stream": "1.1.1",
    "mongoose": "^5.1.1"
  },
  "deprecated": false,
  "description": "Create multiple Mongoose connections to severals DBs; supports also gridfs",
  "devDependencies": {
    "grunt": "^1.0.1",
    "grunt-eslint": "^20.1.0"
  },
  "homepage": "https://github.com/rapidfacture/mongoose-multi#readme",
  "keywords": [
    "connection",
    "database",
    "files",
    "gridfs",
    "mongo",
    "mongoose",
    "multi",
    "multiple"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "rapidfacture",
      "email": "ff@rapidfacture.com"
    }
  ],
  "name": "mongoose-multi",
  "optionalDependencies": {},
  "readme": "# mongoose-multi\n\nCreate multiple Mongoose connections to severals DBs. Store files through gridfs.\n\n## Installation\n\n```\nnpm install mongoose-multi --save\n```\n\n## Getting started\n\n### Use the module in your code\n\nThe syntax is like 'database.collection' for maximum clarity.\n\n```javascript\ndb.application.customer.find().exec(function(err, docs) {\n  // do sth. here with customers\n});\n```\n\"customer\" is the mongoose model and can use it's methods. See <http://mongoosejs.com/docs/guide.html>.\n\n\n### Start the Module\n\nIdea:\n- network configuration in separate file (different modes for production, development, etc.)\n- schemas in separate file\n\n```javascript\n// Start the module in the application\nvar   dbConfig = require('./config.js').db,  // external network file\n      mongooseMulti = require('mongoose-multi'),\n      db = mongooseMulti.start(dbConfig, node.env.PWD + './schemas.js'); // schema file path => mongoose-multi trys to require it\n\n\n// wait for connection to be open\ndb.application.mongooseConnection.once('open', function () {\n\n    // use it\n    db.application.customer.find().exec(function(err, docs) {\n      // do sth. here with customers\n    });\n\n    db.books.article.findOneAndUpdate().exec(function(err, doc) {\n      // do sth. here with article\n    });\n\n    db.application.customer.findExactOne({}, function(err, doc) {\n       // err if no or more than one docs are found\n       // do sth. here with customer\n    });\n\n    db.books.article.findMinOne({}, function(err, doc) {\n      // err if no docs are found\n      // do sth. here with article\n    });\n\n });\n```\n\n#### Network config file\nYou might integrate this your way in your config. mongoose-multi needs one object with all database urls to connect to.\n\n```javascript\n module.exports = {\n     \"db\":{\n         \"application\": 'mongodb://localhost:27017/application',\n         \"book\": 'mongodb://localhost:27017/books'\n     }\n };\n```\n\n#### Mongoose Schemas file\n\n```javascript\n // mongose is needed here for the definition\n var mongoose = require('mongoose');\n var Schema = mongoose.Schema;\n\n\n module.exports = {\n     application:{ // database\n\n         customer: new Schema({ // collection\n             mailaddress: {type: String},\n         }),\n\n         settings: new Schema({ // collection\n             customerId: {type: String, required: false},\n             options: {type: Array, required: false},\n         }),\n\n     },\n\n     book:{ // database\n\n         article: new Schema({ // collection\n             description: {type: String},\n             numOfPages: {type:Number, required: false},\n             weight:{type:Number, required: false},\n         }),\n\n         paperback: new Schema({ // collection\n             description: {type: String, required: false},\n             numOfPages: {type:Number, required: false},\n             weight:{type:Number, required: false},\n         }),\n\n         // this collection \"files\" will be gridfs\n         files: \"gridfs\"\n     }\n\n };\n```\n\n#### Advanced Schema file options\n\nOption 1: If you need to modifie the schemas in your code, you can do so and then directly pass the object for all schemas.\n\n```javascript\n// Start the module\n var  dbConfig = require('./config.js'),  // external network file\n      schemaFile = require('./schemas.js'),  // external schema file\n      mongooseMulti = require('mongoose-multi'),\n      db = mongooseMulti.start(dbConfig, schemaFile);   \n\n// use \"db\" in your app  ..\n```\n\n\nOption 2: For bigger projects you can have a schema file folder. Each database has one file with it's name.\n\n```javascript\n// Start the module\n var  dbConfig = require('./config.js').db,  // external network file\n      mongooseMulti = require('mongoose-multi'),\n      db = mongooseMulti.start(dbConfig, node.env.PWD + './schemas'); // try to require all schema files within folder\n\n// use \"db\" in your app  ..\n```\n\n`./schemas/application` looks like:\n\n```javascript\n /** schemas for db application\n * @version 0.0.2\n */\n var mongoose = require('mongoose');\n var Schema = mongoose.Schema;\n\n module.exports = {\n    customer: new Schema({ // collection\n        mailaddress: {type: String},\n   }),\n\n   settings: new Schema({ // collection\n        customerId: {type: String, required: false},\n        options: {type: Array, required: false},\n   }),\n\n };\n```\n\n`./schemas/book` looks like:\n\n```javascript\n/** schemas for db book\n* @version 0.0.4\n*/\n var mongoose = require('mongoose');\n var Schema = mongoose.Schema;\n\n module.exports = {\n\n         article: new Schema({ // collection\n             description: {type: String},\n             numOfPages: {type:Number, required: false},\n             weight:{type:Number, required: false},\n         }),\n\n         paperback: new Schema({ // collection\n             description: {type: String, required: false},\n             numOfPages: {type:Number, required: false},\n             weight:{type:Number, required: false},\n         }),\n\n         // this collection \"files\" will be gridfs\n         files: \"gridfs\"\n\n };\n```\n\n\n#### Network config file\nThe network file may include all urls to your databases:\n\n```javascript\n module.exports = {\n     \"db\":{\n         \"application\": 'mongodb://localhost:27017/application',\n         \"book\": 'mongodb://localhost:27017/books'\n     }\n };\n```\n\nAlternative you can also pass options:\n\n```javascript\n module.exports = {\n    module.exports = {\n        db: {\n            online: {\n                url: \"mongodb://localhost:27017/auditoria\",\n                options : {useNewUrlParser: true}\n            },\n            history: {\n                url: \"mongodb://otheHost:27017/db_arquitectura\",\n                options : {}\n            }\n        }\n    }\n };\n```\n\n\n## gridfs support\n\nWhy use gridfs?\n\n- serve files over the network\n- easy backup together with database\n- no extra changes on mongoDB itselfe\n\nThis module uses mongoose-gridfs for addressing gridfs. In your schema file, use:\n\n```javascript\n// mongose is needed here for the definition\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nmodule.exports = {\n    book:{ // database\n\n      // this collection \"files\" will be gridfs\n      // use `gridfs` as string instead of the mongoose schema\n      files: \"gridfs\"\n\n      // standard mongoose connection\n      paperback: new Schema({ // collection\n         description: {type: String, required: false},\n         numOfPages: {type:Number, required: false},\n         weight:{type:Number, required: false},\n      }),\n\n    }\n};\n```\nUse gridfs-stream in your application like:\n\n```javascript\n\n// read\nvar readstream = db.books.files.createReadStream({\n   _id: data\n});\nreadstream.pipe(res); // pipe stream to your express response and send it to client\n\n\n\n// write 'buffer' into gridfs\nvar writestream = db.cad.drawingBin.createWriteStream({\n   contentType: 'application/octet-stream'\n});\nvar stream = require('stream'); // stream from buffer\nvar bufferStream = new stream.PassThrough();\nbufferStream.end(buffer);\nbufferStream.pipe(writestream); // buffer to gridfs\n\nwritestream.on('close', function(file) {\n   console.log(file);\n});\nwritestream.on('error', function(err) {\n   console.log(err);\n});\n\n```\nSee https://www.npmjs.com/package/gridfs-stream for further commands.\n\n\n## Reuse the mongoose connection\n\nThe original mongoose connection is also returned for every DB to use it in other own modules, or especially the events like:\n\n```javascript\n   // we assume a database \"application\"\n\n   db.application.mongooseConnection.once('open', function() {\n      console('db application now open');\n      startSomething(db); // start after db is ready\n   });\n```\n\n\n\n## Mongoose reconnection issues\n\nThere have been several issues, that prevent a correct reconnect to the databse.\nIn many cases, one might never see a disconntect, but a app in production should reconnect reliable.\nIn this version we simple terminate the process after 10 seconds disconnect and restart it automatic with pm2.\nThis might be changed in the future, when there is a better and reliable workaround.\nCheck if this is for your process.\n\n\n## Development\nInstall the dev tools with\n\n> npm install\n\nThen you can runs some test cases and eslint with:\n\n> npm test\n\n## ToDo\n\n- tests\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/RAPIDFACTURE/mongoose-multi.git"
  },
  "scripts": {
    "prepublish": "npm test",
    "test": "grunt"
  },
  "version": "0.4.6"
}
