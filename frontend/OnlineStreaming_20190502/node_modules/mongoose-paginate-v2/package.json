{
  "_from": "mongoose-paginate-v2",
  "_id": "mongoose-paginate-v2@1.0.23",
  "_inBundle": false,
  "_integrity": "sha512-658TrRWMk0EnNSKLmGG6+tYzMhj65XDfGJajxR8R85h4EP87DX7Z+fjttklDqOw+NMhLp2gKKRvjT677SJKk8w==",
  "_location": "/mongoose-paginate-v2",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mongoose-paginate-v2",
    "fetchSpec": "latest",
    "name": "mongoose-paginate-v2",
    "raw": "mongoose-paginate-v2",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-paginate-v2/-/mongoose-paginate-v2-1.0.23.tgz",
  "_shasum": "0507d05e0250a3ddbefcc1dd64460fe10ec1fbe0",
  "_shrinkwrap": null,
  "_spec": "mongoose-paginate-v2",
  "_where": "/Users/zihxiangwen/Desktop/OnlineStreaming",
  "author": {
    "email": "aravind_n_c@yahoo.co.in",
    "name": "Aravind NC",
    "url": "http://imwebgangster.com"
  },
  "bugs": {
    "url": "https://github.com/WebGangster/mongoose-paginate-v2/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Fernando LÃ³pez Guevara",
      "url": "fernando.lguevara@gmail.com"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "A cursor based custom pagination library for Mongoose with customizable labels.",
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.3.4",
    "@babel/plugin-proposal-class-properties": "^7.0.0",
    "@babel/plugin-proposal-decorators": "^7.0.0",
    "@babel/plugin-proposal-do-expressions": "^7.0.0",
    "@babel/plugin-proposal-export-default-from": "^7.0.0",
    "@babel/plugin-proposal-export-namespace-from": "^7.0.0",
    "@babel/plugin-proposal-function-bind": "^7.0.0",
    "@babel/plugin-proposal-function-sent": "^7.0.0",
    "@babel/plugin-proposal-json-strings": "^7.0.0",
    "@babel/plugin-proposal-logical-assignment-operators": "^7.0.0",
    "@babel/plugin-proposal-nullish-coalescing-operator": "^7.0.0",
    "@babel/plugin-proposal-numeric-separator": "^7.0.0",
    "@babel/plugin-proposal-optional-chaining": "^7.0.0",
    "@babel/plugin-proposal-pipeline-operator": "^7.0.0",
    "@babel/plugin-proposal-throw-expressions": "^7.0.0",
    "@babel/plugin-syntax-dynamic-import": "^7.0.0",
    "@babel/plugin-syntax-import-meta": "^7.0.0",
    "@babel/preset-env": "^7.3.1",
    "babel-cli": "^6.26.0",
    "chai": "^4.2.0",
    "mocha": "^6.0.1",
    "mongoose": "^5.2.4"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/WebGangster/mongoose-paginate-v2#readme",
  "keywords": [
    "mongodb",
    "mongoose",
    "next",
    "nextpage",
    "paginate",
    "pagination",
    "paginator",
    "paging",
    "plugin",
    "plugin",
    "prev",
    "prevpage",
    "total"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "mongoose-paginate-v2",
  "optionalDependencies": {},
  "readme": "# mongoose-paginate-v2\r\n[![npm version](https://img.shields.io/npm/v/mongoose-paginate-v2.svg)](https://www.npmjs.com/package/mongoose-paginate-v2)\r\n[![Dependency Status](https://david-dm.org/aravindnc/mongoose-paginate-v2.svg)](https://david-dm.org/aravindnc/mongoose-paginate-v2)\r\n[![devDependency Status](https://david-dm.org/aravindnc/mongoose-paginate-v2/dev-status.svg)](https://david-dm.org/aravindnc/mongoose-paginate-v2#info=devDependencies)\r\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/aravindnc/mongoose-paginate-v2/issues)\r\n[![HitCount](http://hits.dwyl.io/aravindnc/mongoose-paginate-v2.svg)](http://hits.dwyl.io/aravindnc/mongoose-paginate-v2)\r\n\r\n> A cursor based custom pagination library for [Mongoose](http://mongoosejs.com) with customizable labels.\r\n\r\nIf you are looking for aggregate query pagination, use this one [mongoose-aggregate-paginate-v2](https://github.com/aravindnc/mongoose-aggregate-paginate-v2)\r\n\r\n## Installation\r\n\r\n```sh\r\nnpm install mongoose-paginate-v2\r\n```\r\n\r\n## Usage\r\n\r\nAdd plugin to a schema and then use model `paginate` method:\r\n\r\n```js\r\nvar mongoose         = require('mongoose');\r\nvar mongoosePaginate = require('mongoose-paginate-v2');\r\n\r\nvar mySchema = new mongoose.Schema({ \r\n    /* your schema definition */ \r\n});\r\n\r\nmySchema.plugin(mongoosePaginate);\r\n\r\nvar myModel = mongoose.model('SampleModel',  mySchema); \r\n\r\nmyModel.paginate().then({}) // Usage\r\n```\r\n\r\n### Model.paginate([query], [options], [callback])\r\n\r\nReturns promise\r\n\r\n**Parameters**\r\n\r\n* `[query]` {Object} - Query criteria. [Documentation](https://docs.mongodb.org/manual/tutorial/query-documents)\r\n* `[options]` {Object}\r\n  - `[select]` {Object | String} - Fields to return (by default returns all fields). [Documentation](http://mongoosejs.com/docs/api.html#query_Query-select) \r\n  - `[collation]` {Object} - Specify the collation [Documentation](https://docs.mongodb.com/manual/reference/collation/)\r\n  - `[sort]` {Object | String} - Sort order. [Documentation](http://mongoosejs.com/docs/api.html#query_Query-sort) \r\n  - `[populate]` {Array | Object | String} - Paths which should be populated with other documents. [Documentation](http://mongoosejs.com/docs/api.html#query_Query-populate)\r\n  - `[lean=false]` {Boolean} - Should return plain javascript objects instead of Mongoose documents?  [Documentation](http://mongoosejs.com/docs/api.html#query_Query-lean)\r\n  - `[leanWithId=true]` {Boolean} - If `lean` and `leanWithId` are `true`, adds `id` field with string representation of `_id` to every document\r\n  - `[offset=0]` {Number} - Use `offset` or `page` to set skip position\r\n  - `[page=1]` {Number}\r\n  - `[limit=10]` {Number}\r\n  - `[customLabels]` {Object} - Developers can provide custom labels for manipulating the response data.\r\n* `[callback(err, result)]` - If specified the callback is called once pagination results are retrieved or when an error has occurred\r\n\r\n**Return value**\r\n\r\nPromise fulfilled with object having properties:\r\n* `docs` {Array} - Array of documents\r\n* `totalDocs` {Number} - Total number of documents in collection that match a query\r\n* `limit` {Number} - Limit that was used\r\n* `hasPrevPage` {Bool} - Availability of prev page.\r\n* `hasNextPage` {Bool} - Availability of next page.\r\n* `page` {Number} - Current page number \r\n* `totalPages` {Number} - Total number of pages.\r\n* `offset` {Number} - Only if specified or default `page`/`offset` values were used\r\n* `prevPage` {Number} - Previous page number if available or NULL\r\n* `nextPage` {Number} - Next page number if available or NULL\r\n* `pagingCounter` {Number} - The starting sl. number of first document.\r\n\r\nPlease note that the above properties can be renamed by setting customLabel attribute.\r\n\r\n### Sample Usage\r\n\r\n#### Return first 10 documents from 100\r\n\r\n```javascript\r\n\r\nconst options = {\r\n    page: 1,\r\n    limit: 10,\r\n\tcollation: {\r\n\t\tlocale: 'en'\r\n\t}\r\n};\r\n\r\nModel.paginate({}, options, function(err, result) {\r\n    // result.docs\r\n    // result.totalDocs = 100\r\n    // result.limit = 10\r\n    // result.page = 1\r\n    // result.totalPages = 10    \r\n    // result.hasNextPage = true\r\n    // result.nextPage = 2\r\n    // result.hasPrevPage = false\r\n    // result.prevPage = null\r\n\t// result.pagingCounter = 1\r\n    \r\n});\r\n```\r\n\r\n### With custom return labels\r\n\r\nNow developers can specify the return field names if they want. Below are the list of attributes whose name can be changed.\r\n\r\n* totalDocs\r\n* docs\r\n* limit\r\n* page\r\n* nextPage\r\n* prevPage\r\n* totalPages\r\n* pagingCounter\r\n\r\nYou should pass the names of the properties you wish to changes using `customLabels` object in options.\r\n\r\nSame query with custom labels\r\n```javascript\r\n\r\nconst myCustomLabels = {\r\n    totalDocs: 'itemCount',\r\n    docs: 'itemsList',\r\n    limit: 'perPage',\r\n    page: 'currentPage',\r\n    nextPage: 'next',\r\n    prevPage: 'prev',\r\n    totalPages: 'pageCount'\r\n\tpagingCounter: 'slNo'\r\n};\r\n\r\nconst options = {\r\n    page: 1,\r\n    limit: 10,\r\n    customLabels: myCustomLabels\r\n};\r\n\r\nModel.paginate({}, options, function(err, result) {\r\n    // result.itemsList [here docs become itemsList]\r\n    // result.itemCount = 100 [here totalDocs becomes itemCount]\r\n    // result.perPage = 10 [here limit becomes perPage]\r\n    // result.currentPage = 1 [here page becomes currentPage]\r\n    // result.pageCount = 10 [here totalPages becomes pageCount]\r\n    // result.next = 2 [here nextPage becomes next]\r\n    // result.prev = null [here prevPage becomes prev]\r\n\t// result.slNo = 1 [here pagingCounter becomes slNo]\r\n    \r\n    // result.hasNextPage = true [not changeable]\r\n    // result.hasPrevPage = false [not changeable]\r\n});\r\n```\r\n\r\n### Other Examples\r\n\r\nUsing `offset` and `limit`:\r\n```javascript\r\nModel.paginate({}, { offset: 30, limit: 10 }, function(err, result) {\r\n    // result.docs\r\n    // result.totalPages\r\n    // result.limit - 10\r\n    // result.offset - 30\r\n});\r\n```\r\n\r\nWith promise:\r\n```js\r\nModel.paginate({}, { offset: 30, limit: 10 }).then(function(result) {\r\n    // ...\r\n});\r\n```\r\n\r\n#### More advanced example\r\n\r\n```javascript\r\nvar query   = {};\r\nvar options = {\r\n    select:   'title date author',\r\n    sort:     { date: -1 },\r\n    populate: 'author',\r\n    lean:     true,\r\n    offset:   20, \r\n    limit:    10\r\n};\r\n\r\nBook.paginate(query, options).then(function(result) {\r\n    // ...\r\n});\r\n```\r\n\r\n#### Zero limit\r\n\r\nYou can use `limit=0` to get only metadata:\r\n\r\n```javascript\r\nModel.paginate({}, { limit: 0 }).then(function(result) {\r\n    // result.docs - empty array\r\n    // result.totalDocs\r\n    // result.limit - 0    \r\n});\r\n```\r\n\r\n#### Set custom default options for all queries\r\n\r\nconfig.js:\r\n```javascript\r\nvar mongoosePaginate = require('mongoose-paginate-v2');\r\n\r\nmongoosePaginate.paginate.options = { \r\n    lean:  true,\r\n    limit: 20\r\n};\r\n```\r\n\r\ncontroller.js:\r\n```javascript\r\nModel.paginate().then(function(result) {\r\n    // result.docs - array of plain javascript objects\r\n    // result.limit - 20\r\n});\r\n```\r\n\r\n## License\r\n[MIT](LICENSE)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/WebGangster/mongoose-paginate-v2.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "prepublish": "npm run test",
    "pretest": "npm run build",
    "test": "mocha tests/*.js -R spec --ui bdd --timeout 5000"
  },
  "version": "1.0.23"
}
